{"ast":null,"code":"import _objectSpread from \"/Users/luistorralbo/Desktop/burger-maker/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as actionTypes from '../actions/actionTypes';\nconst initialState = {\n  ingredients: {\n    salad: 1,\n    cheese: 1,\n    meat: 1,\n    bacon: 0\n  },\n  totalPrice: 4000,\n  error: false\n};\nconst INGREDIENT_PRICES = {\n  salad: 200,\n  cheese: 1000,\n  meat: 1500,\n  bacon: 1000\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_INGREDIENT:\n      return _objectSpread({}, state, {\n        ingredients: _objectSpread({}, state.ingredients, {\n          [action.ingredientName]: state.ingredients[action.ingredientName] + 1\n        }),\n        totalPrice: state.totalPrice + INGREDIENT_PRICES[action.ingredientName]\n      });\n\n    case actionTypes.REMOVE_INGREDIENT:\n      return _objectSpread({}, state, {\n        ingredients: _objectSpread({}, state.ingredients, {\n          [action.ingredientName]: state.ingredients[action.ingredientName] - 1\n        }),\n        totalPrice: state.totalPrice - INGREDIENT_PRICES[action.ingredientName]\n      });\n\n    case actionTypes.SET_INGREDIENTS:\n      return _objectSpread({}, state, {\n        ingredients: action.ingredients,\n        error: false\n      });\n\n    case actionTypes.FETCH_INGREDIENTS_FAILED:\n      return _objectSpread({}, state, {\n        error: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/luistorralbo/Desktop/burger-maker/src/store/reducers/burgerBuilder.js"],"names":["actionTypes","initialState","ingredients","salad","cheese","meat","bacon","totalPrice","error","INGREDIENT_PRICES","reducer","state","action","type","ADD_INGREDIENT","ingredientName","REMOVE_INGREDIENT","SET_INGREDIENTS","FETCH_INGREDIENTS_FAILED"],"mappings":";AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE;AACXC,IAAAA,KAAK,EAAE,CADI;AAEXC,IAAAA,MAAM,EAAE,CAFG;AAGXC,IAAAA,IAAI,EAAE,CAHK;AAIXC,IAAAA,KAAK,EAAE;AAJI,GADM;AAOnBC,EAAAA,UAAU,EAAE,IAPO;AAQnBC,EAAAA,KAAK,EAAE;AARY,CAArB;AAWA,MAAMC,iBAAiB,GAAG;AACxBN,EAAAA,KAAK,EAAE,GADiB;AAExBC,EAAAA,MAAM,EAAE,IAFgB;AAGxBC,EAAAA,IAAI,EAAE,IAHkB;AAIxBC,EAAAA,KAAK,EAAE;AAJiB,CAA1B;;AAOA,MAAMI,OAAO,GAAG,CAACC,KAAK,GAAGV,YAAT,EAAuBW,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKb,WAAW,CAACc,cAAjB;AACE,+BACKH,KADL;AAEET,QAAAA,WAAW,oBACNS,KAAK,CAACT,WADA;AAET,WAACU,MAAM,CAACG,cAAR,GAAyBJ,KAAK,CAACT,WAAN,CAAkBU,MAAM,CAACG,cAAzB,IAA2C;AAF3D,UAFb;AAMER,QAAAA,UAAU,EAAEI,KAAK,CAACJ,UAAN,GAAmBE,iBAAiB,CAACG,MAAM,CAACG,cAAR;AANlD;;AAQF,SAAKf,WAAW,CAACgB,iBAAjB;AACE,+BACKL,KADL;AAEET,QAAAA,WAAW,oBACNS,KAAK,CAACT,WADA;AAET,WAACU,MAAM,CAACG,cAAR,GAAyBJ,KAAK,CAACT,WAAN,CAAkBU,MAAM,CAACG,cAAzB,IAA2C;AAF3D,UAFb;AAMER,QAAAA,UAAU,EAAEI,KAAK,CAACJ,UAAN,GAAmBE,iBAAiB,CAACG,MAAM,CAACG,cAAR;AANlD;;AAQF,SAAKf,WAAW,CAACiB,eAAjB;AACE,+BACKN,KADL;AAEET,QAAAA,WAAW,EAAEU,MAAM,CAACV,WAFtB;AAGEM,QAAAA,KAAK,EAAE;AAHT;;AAKF,SAAKR,WAAW,CAACkB,wBAAjB;AACE,+BACKP,KADL;AAEEH,QAAAA,KAAK,EAAE;AAFT;;AAIF;AACE,aAAOG,KAAP;AA/BJ;AAiCD,CAlCD;;AAoCA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n  ingredients: {\n    salad: 1,\n    cheese: 1,\n    meat: 1,\n    bacon: 0\n  },\n  totalPrice: 4000,\n  error: false\n};\n\nconst INGREDIENT_PRICES = {\n  salad: 200,\n  cheese: 1000,\n  meat: 1500,\n  bacon: 1000\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_INGREDIENT:\n      return {\n        ...state,\n        ingredients: {\n          ...state.ingredients,\n          [action.ingredientName]: state.ingredients[action.ingredientName] + 1\n        },\n        totalPrice: state.totalPrice + INGREDIENT_PRICES[action.ingredientName]\n      };\n    case actionTypes.REMOVE_INGREDIENT:\n      return {\n        ...state,\n        ingredients: {\n          ...state.ingredients,\n          [action.ingredientName]: state.ingredients[action.ingredientName] - 1\n        },\n        totalPrice: state.totalPrice - INGREDIENT_PRICES[action.ingredientName]\n      };\n    case actionTypes.SET_INGREDIENTS:\n      return {\n        ...state,\n        ingredients: action.ingredients,\n        error: false\n      };\n    case actionTypes.FETCH_INGREDIENTS_FAILED:\n      return {\n        ...state,\n        error: true\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}